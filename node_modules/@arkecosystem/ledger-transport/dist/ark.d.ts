/// <reference types="node" />
import { Transport as LedgerTransport } from "@ledgerhq/hw-transport";
export declare class ARK implements LedgerTransport {
    private transport;
    /**
     * Create an instance using a 'LedgerTransport' object.
     *
     * 'decorateAppAPIMethods' basically "locks" execution of the current instruction,
     * preventing race conditions where parallel calls are attempted.
     *
     * @param {LedgerTransport} transport generic transport interface for Ledger HW.
     */
    constructor(transport: LedgerTransport);
    /**
     * Get the installed Application version from a Ledger Device.
     *
     * @returns {Promise<string>} installed application version (e.g. '2.0.1')
     */
    getVersion(): Promise<string>;
    /**
     * Get the PublicKey from a Ledger Device using a Bip44 path-string.
     *
     * @param {string} path bip44 path as a string
     * @returns {Promise<string>} device compressed publicKey
     */
    getPublicKey(path: string): Promise<string>;
    /**
     * Sign a Message using a Ledger Device with Ecdsa Signatures.
     *
     * @param {string} path bip44 path as a string
     * @param {Buffer} message message payload
     * @returns {Promise<string>} payload ecdsa signature
     */
    signMessage(path: string, message: Buffer): Promise<string>;
    /**
     * Sign a Message using a Ledger Device with Schnorr Signatures.
     *
     * @param {string} path bip44 path as a string
     * @param {Buffer} message message payload
     * @returns {Promise<string>} payload schnorr signature
     */
    signMessageWithSchnorr(path: string, message: Buffer): Promise<string>;
    /**
     * Sign a Transaction using a Ledger Device with Ecdsa Signatures.
     *
     * @param {string} path bip44 path as a string
     * @param {Buffer} payload transaction bytes
     * @returns {Promise<string>} payload ecdsa signature
     */
    signTransaction(path: string, payload: Buffer): Promise<string>;
    /**
     * Sign a Transaction using a Ledger Device with Schnorr Signatures.
     *
     * @param {string} path bip44 path as a string
     * @param {Buffer} payload transaction bytes
     * @returns {Promise<string>} payload schnorr signature
     */
    signTransactionWithSchnorr(path: string, payload: Buffer): Promise<string>;
    /**
     * Check the formatting of a message.
     *
     * @param {Buffer} message message payload
     * @throws {MessageAsciiError} if the message contains non-ascii characters
     */
    private checkMessageFormat;
    /**
     * Get the PublicKey from a Ledger Device using ARK App <= 2.0.1.
     *
     * @param {string} path bip44 path as a string
     * @returns {Promise<Buffer>} full apdu response
     */
    private getPublicKeyLegacy;
}
