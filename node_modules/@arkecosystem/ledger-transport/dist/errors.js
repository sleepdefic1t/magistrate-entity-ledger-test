"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const LedgerHQErrors = __importStar(require("@ledgerhq/errors"));
class MessageAsciiError extends LedgerHQErrors.TransportStatusError {
    constructor() {
        super({
            statusText: `Message must contain printable ASCII characters.`,
            statusCode: LedgerHQErrors.StatusCodes.INCORRECT_DATA,
        });
    }
}
exports.MessageAsciiError = MessageAsciiError;
class PayloadLengthError extends LedgerHQErrors.TransportStatusError {
    constructor(expected, limit) {
        super({
            statusText: `Payload length of ${expected} exceeds ${limit}.`,
            statusCode: LedgerHQErrors.StatusCodes.INCORRECT_LENGTH,
        });
    }
}
exports.PayloadLengthError = PayloadLengthError;
class Bip44PathError extends LedgerHQErrors.TransportStatusError {
    constructor(path) {
        super({
            statusText: `Bip44 Path '${path}' is Invalid`,
            statusCode: LedgerHQErrors.StatusCodes.INCORRECT_DATA,
        });
    }
}
exports.Bip44PathError = Bip44PathError;
//# sourceMappingURL=errors.js.map