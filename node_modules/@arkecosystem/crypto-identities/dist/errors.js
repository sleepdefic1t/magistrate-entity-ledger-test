"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidBase58ChecksumError = exports.InvalidMultiSignatureAssetError = exports.AddressNetworkError = exports.PublicKeyError = exports.PrivateKeyLengthError = exports.NetworkVersionError = exports.CryptoError = void 0;
class CryptoError extends Error {
    constructor(message) {
        super(message);
        Object.defineProperty(this, "message", {
            enumerable: false,
            value: message,
        });
        Object.defineProperty(this, "name", {
            enumerable: false,
            value: this.constructor.name,
        });
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.CryptoError = CryptoError;
class NetworkVersionError extends CryptoError {
    constructor(expected, given) {
        super(`Expected version to be ${expected}, but got ${given}.`);
    }
}
exports.NetworkVersionError = NetworkVersionError;
class PrivateKeyLengthError extends CryptoError {
    constructor(expected, given) {
        super(`Expected length to be ${expected}, but got ${given}.`);
    }
}
exports.PrivateKeyLengthError = PrivateKeyLengthError;
class PublicKeyError extends CryptoError {
    constructor(given) {
        super(`Expected ${given} to be a valid public key.`);
    }
}
exports.PublicKeyError = PublicKeyError;
class AddressNetworkError extends CryptoError {
    constructor(what) {
        super(what);
    }
}
exports.AddressNetworkError = AddressNetworkError;
class InvalidMultiSignatureAssetError extends CryptoError {
    constructor() {
        super(`The multi signature asset is invalid.`);
    }
}
exports.InvalidMultiSignatureAssetError = InvalidMultiSignatureAssetError;
class InvalidBase58ChecksumError extends CryptoError {
    constructor() {
        super("Invalid checksum for base58 string.");
    }
}
exports.InvalidBase58ChecksumError = InvalidBase58ChecksumError;
//# sourceMappingURL=errors.js.map