"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class InvalidCriteria extends Error {
    constructor(value, criteria, path) {
        super(InvalidCriteria.getMessage(value, criteria, path));
        this.value = value;
        this.criteria = criteria;
        this.path = path;
    }
    static getMessage(value, criteria, path) {
        let c;
        if (typeof criteria === "object") {
            if (criteria === null) {
                c = "'null'";
            }
            else {
                c = `'${criteria}' (${criteria.constructor.name})`;
            }
        }
        else {
            c = `'${criteria}' (${typeof criteria})`;
        }
        let v;
        if (typeof value === "object") {
            if (value === null) {
                v = "null";
            }
            else {
                v = value.constructor.name;
            }
        }
        else {
            v = typeof value;
        }
        if (path.length) {
            return `Invalid criteria ${c} at '${path.join(".")}' for ${v} value`;
        }
        else {
            return `Invalid criteria ${c} for ${v} value`;
        }
    }
}
exports.InvalidCriteria = InvalidCriteria;
class UnsupportedValue extends Error {
    constructor(value, path) {
        super(UnsupportedValue.getMessage(value, path));
        this.value = value;
        this.path = path;
    }
    static getMessage(value, path) {
        let v;
        if (Array.isArray(value)) {
            v = `Array(${value.length})`;
        }
        else if (typeof value === "object") {
            if (value === null) {
                v = "'null'";
            }
            else {
                v = `'${value}' (${value.constructor.name})`;
            }
        }
        else {
            v = `'${value}' (${typeof value})`;
        }
        if (path.length) {
            return `Unsupported value ${v} at '${path.join(".")}'`;
        }
        else {
            return `Unsupported value ${v}`;
        }
    }
}
exports.UnsupportedValue = UnsupportedValue;
class UnexpectedError extends Error {
    constructor(error, path) {
        super(path.length
            ? `Unexpected error '${error.message}' (${error.constructor.name}) at '${path.join(".")}'`
            : `Unexpected error '${error.message}' (${error.constructor.name})`);
        this.error = error;
        this.path = path;
    }
}
exports.UnexpectedError = UnexpectedError;
//# sourceMappingURL=errors.js.map