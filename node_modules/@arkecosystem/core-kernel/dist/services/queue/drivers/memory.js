"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const perf_hooks_1 = require("perf_hooks");
const enums_1 = require("../../../enums");
const ioc_1 = require("../../../ioc");
/**
 * @export
 * @class MemoryQueue
 * @implements {Queue}
 */
let MemoryQueue = class MemoryQueue {
    constructor() {
        /**
         * @private
         * @type {(QueueJob[])}
         * @memberof MemoryQueue
         */
        this.jobs = [];
        /**
         * @private
         * @type {boolean}
         * @memberof MemoryQueue
         */
        this.running = false;
        this.started = false;
        this.onDataCallback = undefined;
        this.onErrorCallback = undefined;
        this.onDrainCallback = undefined;
        this.onProcessedCallbacks = [];
    }
    /**
     * Create a new instance of the queue.
     *
     * @param {Application} app
     * @returns {Queue}
     * @memberof CacheStore
     */
    async make() {
        return this;
    }
    /**
     * Start the queue.
     *
     * @returns {Promise<void>}
     * @memberof MemoryQueue
     */
    async start() {
        this.started = true;
        this.processJobs();
    }
    /**
     * Stop the queue.
     *
     * @returns {Promise<void>}
     * @memberof MemoryQueue
     */
    async stop() {
        this.started = false;
        const promise = this.waitUntilProcessed();
        await this.clear();
        return promise;
    }
    /**
     * Pause the queue.
     *
     * @returns {Promise<void>}
     * @memberof MemoryQueue
     */
    async pause() {
        this.started = false;
        await this.waitUntilProcessed();
    }
    /**
     * Resume the queue.
     *
     * @returns {Promise<void>}
     * @memberof MemoryQueue
     */
    async resume() {
        await this.start();
    }
    /**
     * Clear the queue.
     *
     * @returns {Promise<void>}
     * @memberof MemoryQueue
     */
    async clear() {
        this.jobs = [];
    }
    /**
     * Push a new job onto the queue.
     *
     * @template T
     * @param {QueueJob} job
     * @returns {Promise<void>}
     * @memberof MemoryQueue
     */
    async push(job) {
        this.jobs.push(job);
        this.processJobs();
    }
    /**
     * Push a new job onto the queue after a delay.
     *
     * @template T
     * @param {number} delay
     * @param {QueueJob} job
     * @returns {Promise<void>}
     * @memberof MemoryQueue
     */
    async later(delay, job) {
        setTimeout(() => this.push(job), delay);
    }
    /**
     * Push an array of jobs onto the queue.
     *
     * @param {QueueJob[]} jobs
     * @returns {Promise<void>}
     * @memberof MemoryQueue
     */
    async bulk(jobs) {
        for (const job of jobs) {
            this.jobs.push(job);
        }
    }
    /**
     * Get the size of the queue.
     *
     * @returns {number}
     * @memberof MemoryQueue
     */
    size() {
        return this.jobs.length;
    }
    isStarted() {
        return this.started;
    }
    isRunning() {
        return this.running;
    }
    onData(callback) {
        this.onDataCallback = callback;
    }
    onError(callback) {
        this.onErrorCallback = callback;
    }
    onDrain(callback) {
        this.onDrainCallback = callback;
    }
    waitUntilProcessed() {
        return new Promise((resolve) => {
            if (this.running) {
                const onProcessed = () => {
                    resolve();
                };
                this.onProcessedCallbacks.push(onProcessed);
            }
            else {
                resolve();
            }
        });
    }
    resolveOnProcessed() {
        while (this.onProcessedCallbacks.length) {
            const onProcessed = this.onProcessedCallbacks.shift();
            onProcessed();
        }
    }
    async processJobs() {
        // Prevent entering if already processing
        if (this.isRunning()) {
            return;
        }
        while (this.jobs.length) {
            if (!this.started) {
                break;
            }
            this.running = true;
            const job = this.jobs.shift();
            const start = perf_hooks_1.performance.now();
            try {
                const data = await job.handle();
                await this.events.dispatch(enums_1.QueueEvent.Finished, {
                    driver: "memory",
                    executionTime: perf_hooks_1.performance.now() - start,
                    data: data,
                });
                if (this.onDataCallback) {
                    this.onDataCallback(job, data);
                }
            }
            catch (error) {
                await this.events.dispatch(enums_1.QueueEvent.Failed, {
                    driver: "memory",
                    executionTime: perf_hooks_1.performance.now() - start,
                    error: error,
                });
                this.logger.warning(`Queue error occurs when handling job: ${job}`);
                if (this.onErrorCallback) {
                    this.onErrorCallback(job, error);
                }
            }
        }
        this.running = false;
        this.resolveOnProcessed();
        if (!this.jobs.length && this.onDrainCallback) {
            this.onDrainCallback();
        }
    }
};
__decorate([
    ioc_1.inject(ioc_1.Identifiers.EventDispatcherService),
    __metadata("design:type", Object)
], MemoryQueue.prototype, "events", void 0);
__decorate([
    ioc_1.inject(ioc_1.Identifiers.LogService),
    __metadata("design:type", Object)
], MemoryQueue.prototype, "logger", void 0);
MemoryQueue = __decorate([
    ioc_1.injectable()
], MemoryQueue);
exports.MemoryQueue = MemoryQueue;
//# sourceMappingURL=memory.js.map