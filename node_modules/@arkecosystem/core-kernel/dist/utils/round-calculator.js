"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("@arkecosystem/crypto");
const calculate_forging_info_1 = require("./calculate-forging-info");
exports.isNewRound = (height) => {
    const milestones = crypto_1.Managers.configManager.get("milestones");
    // Since milestones are merged, find the first milestone to introduce the delegate count.
    let milestone;
    for (let i = milestones.length - 1; i >= 0; i--) {
        const temp = milestones[i];
        if (temp.height > height) {
            continue;
        }
        if (!milestone || temp.activeDelegates === milestone.activeDelegates) {
            milestone = temp;
        }
        else {
            break;
        }
    }
    return height === 1 || (height - milestone.height) % milestone.activeDelegates === 0;
};
exports.calculateRound = (height) => {
    const result = {
        round: 1,
        roundHeight: 1,
        nextRound: 0,
        maxDelegates: 0,
    };
    let nextMilestone = crypto_1.Managers.configManager.getNextMilestoneWithNewKey(1, "activeDelegates");
    let activeDelegates = crypto_1.Managers.configManager.getMilestone(1).activeDelegates;
    let milestoneHeight = 1;
    const milestones = calculate_forging_info_1.getMilestonesWhichAffectActiveDelegateCount();
    for (let i = 0; i < milestones.length - 1; i++) {
        if (height < nextMilestone.height) {
            break;
        }
        const spanHeight = nextMilestone.height - milestoneHeight;
        if (spanHeight % activeDelegates !== 0) {
            throw new crypto_1.Errors.InvalidMilestoneConfigurationError(`Bad milestone at height: ${height}. The number of delegates can only be changed at the beginning of a new round.`);
        }
        result.round += spanHeight / activeDelegates;
        result.roundHeight = nextMilestone.height;
        result.maxDelegates = nextMilestone.data;
        activeDelegates = nextMilestone.data;
        milestoneHeight = nextMilestone.height;
        nextMilestone = crypto_1.Managers.configManager.getNextMilestoneWithNewKey(nextMilestone.height, "activeDelegates");
    }
    const heightFromLastSpan = height - milestoneHeight;
    const roundIncrease = Math.floor(heightFromLastSpan / activeDelegates);
    const nextRoundIncrease = (heightFromLastSpan + 1) % activeDelegates === 0 ? 1 : 0;
    result.round += roundIncrease;
    result.roundHeight += roundIncrease * activeDelegates;
    result.nextRound = result.round + nextRoundIncrease;
    result.maxDelegates = activeDelegates;
    return result;
};
//# sourceMappingURL=round-calculator.js.map