"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("@arkecosystem/crypto");
exports.getMilestonesWhichAffectActiveDelegateCount = () => {
    const milestones = [
        {
            found: true,
            height: 1,
            data: crypto_1.Managers.configManager.getMilestone(1).activeDelegates,
        },
    ];
    let nextMilestone = crypto_1.Managers.configManager.getNextMilestoneWithNewKey(1, "activeDelegates");
    while (nextMilestone.found) {
        milestones.push(nextMilestone);
        nextMilestone = crypto_1.Managers.configManager.getNextMilestoneWithNewKey(nextMilestone.height, "activeDelegates");
    }
    return milestones;
};
exports.calculateForgingInfo = (timestamp, height, getTimeStampForBlock) => {
    const slotInfo = crypto_1.Crypto.Slots.getSlotInfo(getTimeStampForBlock, timestamp, height);
    const [currentForger, nextForger] = findIndex(height, slotInfo.slotNumber, getTimeStampForBlock);
    const canForge = slotInfo.forgingStatus;
    return { currentForger, nextForger, blockTimestamp: slotInfo.startTime, canForge };
};
const findIndex = (height, slotNumber, getTimeStampForBlock) => {
    let nextMilestone = crypto_1.Managers.configManager.getNextMilestoneWithNewKey(1, "activeDelegates");
    let lastSpanSlotNumber = 0;
    let activeDelegates = crypto_1.Managers.configManager.getMilestone(1).activeDelegates;
    const milestones = exports.getMilestonesWhichAffectActiveDelegateCount();
    for (let i = 0; i < milestones.length - 1; i++) {
        if (height < nextMilestone.height) {
            break;
        }
        const lastSpanEndTime = getTimeStampForBlock(nextMilestone.height - 1);
        lastSpanSlotNumber =
            crypto_1.Crypto.Slots.getSlotInfo(getTimeStampForBlock, lastSpanEndTime, nextMilestone.height - 1).slotNumber + 1;
        activeDelegates = nextMilestone.data;
        nextMilestone = crypto_1.Managers.configManager.getNextMilestoneWithNewKey(nextMilestone.height, "activeDelegates");
    }
    const currentForger = (slotNumber - lastSpanSlotNumber) % activeDelegates;
    const nextForger = (currentForger + 1) % activeDelegates;
    return [currentForger, nextForger];
};
//# sourceMappingURL=calculate-forging-info.js.map